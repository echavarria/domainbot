#!/usr/bin/env node

var args = process.argv.slice(2);
var com  = require('commander-plus');
var dns = require('dns');
var exec = require('child_process').exec;

console.log('\x1b[36m','Waking domainbot...','\x1b[0m');
console.log('available commands: check, whois, resolve, help, exit');
showDefaultPrompt();

var net = require('net');
var sockets = [];
 
/*
 * Cleans the input of carriage return, newline
 */
function cleanInput(data) {
	return data.toString().replace(/(\r\n|\n|\r)/gm,"");
}
 
/*
 * Method executed when data is received from a socket
 */
function receiveData(socket, data) {
	var cleanData = cleanInput(data);
	if(cleanData === "@quit") {
		socket.end('Goodbye!\n');
	}
	else {
		for(var i = 0; i<sockets.length; i++) {
			if (sockets[i] !== socket) {
				sockets[i].write(data);
			}
		}
	}
}
 
/*
 * Method executed when a socket ends
 */
function closeSocket(socket) {
	var i = sockets.indexOf(socket);
	if (i != -1) {
		sockets.splice(i, 1);
	}
}
 
/*
 * Callback method executed when a new TCP socket is opened.
 */
function newSocket(socket) {
	sockets.push(socket);
	socket.write('Welcome to the Telnet server!\n');
	socket.on('data', function(data) {
		receiveData(socket, data);
	})
	socket.on('end', function() {
		closeSocket(socket);
	})
}
 
// Create a new server and provide a callback for when a connection occurs
var server = net.createServer(newSocket);
 
// Listen on port 8888
server.listen(8888);






function cleanInput(data) {
  return data.toString().replace(/(\r\n|\n|\r)/gm,"");
}
function showDefaultPrompt() {
  com.prompt('domainbot> ',onInput);
}

function onInput(command) {
  command = command.split(' ');
  
  if (command.length === 1) {
    if (command[0] === 'exit') {
      console.log('Goodbye!');
      process.exit(0);
    }
    else if (command[0] === 'check') {
      com.prompt('enter domain name: ', checkDomain);
    }
    else if (command[0] === 'whois') {
      com.prompt('enter domain name: ', whoisDomain);
    }
    else if (command[0] === 'resolve') {
      com.prompt('enter domain name: ', resolveDomain);
    }
    else if (command[0] === 'help') {
       console.log('available commands: check, whois, resolve, help, exit');
       showDefaultPrompt();
    }
    else {
      console.log('oops, bad command');
      showDefaultPrompt();
    }
  } else {
    if (command[0] === 'check') {
      checkDomain(command[1]);
    }
    else if (command[0] === 'whois') {
      whoisDomain(command[1]);
    }
    else if (command[0] === 'resolve') {
      resolveDomain(command[1]);
    } else {
      console.log('oops, bad command');
      showDefaultPrompt();
    }
  }
}


function checkDomain (domainName) {
  console.log('checking: '+domainName);
  
  if (domainName === '') {
    console.log('Please enter a domain name.');
    com.prompt('enter domain name: ', checkDomain);
    return;
  };  

  dns.resolveNs(domainName,function(error,result) {
    if (error) { 
       console.log(JSON.stringify(error));
       if (error.code  === 'ENOTFOUND') {
          console.log('\x1b[32m','Available','\x1b[0m');
       }
    } else {

      console.log(result);

      if (typeof result !== 'undefined') {
          if (result.length > 0 ) {
              console.log('\x1b[31m','Not Available','\x1b[0m');
          } else {
              console.log('\x1b[32m','Available');
          }
      }
    }
    showDefaultPrompt();
  });  
}


function whoisDomain (domainName) {
  var child;
  
  if (domainName === '') {
    console.log('Please enter a domain name.');
    com.prompt('enter domain name: ', checkDomain);
    return;
  };

  child = exec('whois '+domainName,
    function (error, stdout, stderr) {
      console.log(stdout);
      //console.log('stderr: ' + stderr);
      if (error !== null) {
        console.log('exec error: ' + error);
      }
        
      showDefaultPrompt();
  });
}

function resolveDomain(domainName) {
  console.log('checking: '+domainName);
  
  if (domainName === '') {
    console.log('Please enter a domain name.');
    com.prompt('enter domain name: ', checkDomain);
    return;
  };
  
   _doResolve(domainName, 'A', function () {
     _doResolve(domainName, 'AAAA', function () {
       _doResolve(domainName, 'MX', function () {
         _doResolve(domainName, 'CNAME', function () {
           _doResolve(domainName, 'NS', function () {
             showDefaultPrompt();
           });
         });
       });
     });
   });
}

function _doResolve(domainName, rType, callback) {
  dns.resolve(domainName,rType,function(error,result) {
    if (error) {
       //console.log(JSON.stringify(error));
    } else {
      console.log(rType+':');
      console.log(result);
    }
    callback();
  });
}
